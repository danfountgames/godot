#!/usr/bin/env python

Import("env")
Import("env_modules")

env_spirv = env_modules.Clone()

# Thirdparty source files

thirdparty_obj = []

if env["builtin_glslang"]:
    thirdparty_dir = "#thirdparty/spirv-cross/"
    thirdparty_sources = [
        "spirv_cfg.cpp",
        "spirv_cross_util.cpp",
        "spirv_cross.cpp",
        "spirv_parser.cpp",
        "spirv_msl.cpp",
        "spirv_reflect.cpp",
        "spirv_glsl.cpp",
        "spirv_cross_parsed_ir.cpp",
        "spirv_cpp.cpp",
    ]

    thirdparty_sources = [thirdparty_dir + file for file in thirdparty_sources]

    # Treat SPIRV-Cross headers as system headers to avoid raising warnings. Not supported on MSVC.
    # Include `#thirdparty` to workaround mismatch between location of `SPIRV` in library source
    # and in installed public headers.
    if not env.msvc:
        env_spirv.Append(CPPFLAGS=["-isystem", Dir(thirdparty_dir).path, "-isystem", Dir("#thirdparty").path])
    else:
        env_spirv.Prepend(CPPPATH=[thirdparty_dir, "#thirdparty"])

    env_spirv.Append(CPPDEFINES=["SPIRV_CROSS_EXCEPTIONS_TO_ASSERTIONS"])
    env_thirdparty = env_spirv.Clone()
    env_thirdparty.disable_warnings()
    env_thirdparty.add_source_files(thirdparty_obj, thirdparty_sources)
    env.modules_sources += thirdparty_obj


# Godot source files

module_obj = []

env_spirv.add_source_files(module_obj, "*.cpp")
env.modules_sources += module_obj

# Needed to force rebuilding the module files when the thirdparty library is updated.
env.Depends(module_obj, thirdparty_obj)
